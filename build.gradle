plugins {
    id "com.peterabeles.gversion" version "1.10.2"
}

gversion {
    srcDir = "src/main/java"
    classPackage = "boofcv"
    className = "ValidationBoofVersion"
}

allprojects {
    group = 'org.boofcv'
    version = '1.1.0'

    apply plugin: 'java-library'

    repositories {
        mavenCentral()
        mavenLocal()

        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    project.ext.set("jabel_version", '1.0.0')

    java {
        withJavadocJar()
        withSourcesJar()
        toolchain { languageVersion = JavaLanguageVersion.of(17) }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        sourceCompatibility = 17
        options.release = 11
    }

    javadoc { configure(options) {
        failOnError = false
        addStringOption('Xdoclint:none', '-quiet')
    }}

    dependencies {
        api files("$project.rootDir/lib/ProjectBUBO.jar")

        ['boofcv-core', 'boofcv-io', 'boofcv-swing', 'boofcv-ffmpeg', 'boofcv-simulation', 'boofcv-kotlin',
         'boofcv-pdf', 'boofcv-recognition', 'boofcv-reconstruction', 'demonstrations', 'boofcv-learning',
         'applications'].each
                { String a -> api("org.boofcv:$a:$version") }
        api group: 'com.google.guava', name: 'guava', version: '17.0'
        api group: 'commons-io', name: 'commons-io', version: '2.6'
        api group: 'args4j', name: 'args4j', version: '2.33'
        api 'org.apache.commons:commons-lang3:3.7'

        api 'com.sun.mail:javax.mail:1.6.0'

        annotationProcessor("com.github.bsideup.jabel:jabel-javac-plugin:${project.jabel_version}")

        testImplementation group: 'junit', name: 'junit', version: '4.12'
    }
}

subprojects {
    // Create a jar which contains all the applications
    task moduleJars(type: Jar) {
        manifest {
            attributes 'Implementation-Title': 'BoofCV Regression Jar',
                    'Implementation-Version': '1'
        }

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        outputs.upToDateWhen { false }

        archiveFile.set(file('module_regression.jar'))

        from sourceSets.main.output

        dependsOn configurations.runtimeClasspath
        from { configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) } } {
            exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
        }
    }

    clean.doFirst { delete "module_regression.jar" }
}

dependencies {
    api project(':modules:common')
}

project.compileJava.dependsOn(createVersionFile)

task pointLabelJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Point Labeling',
                'Implementation-Version': version,
                'Main-Class': 'boofcv.applications.HandSelectPointsApp'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    outputs.upToDateWhen { false }

    from {
        configurations.compile.findAll {
            it.name.matches("boofcv-(recognition|feature|geo|sfm|calibration|ip|io|swing).*") ||
                    it.name.matches("(common-|georegression|ddogleg|ejml).*")
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar

    doLast { archivePath.renameTo(file('label_points.jar')) }
}

// Create a jar which contains all the applications
task regressionJar(type: Jar, dependsOn: ':build') {

    manifest {
        attributes 'Implementation-Title': 'Regression Jar',
                'Implementation-Version': version,
                'Main-Class': 'boofcv.regression.MasterRegressionApplication'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    outputs.upToDateWhen { false }

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from { configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) } } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }

//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } {
//        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
//    } with jar

    doLast { archivePath.renameTo(file('regression.jar')) }
}

clean.doFirst { delete "regression.jar" }

def not_modules = new ArrayList();
not_modules.addAll(subprojects.findAll { x -> x.path.startsWith(':thirdparty') })
not_modules.add(project(':modules'))
not_modules = not_modules.collect { p -> p.path }
not_modules.each { String a ->
    project(a) {
        jar.enabled = false
    }
}

clean.doFirst {
    delete "results"
    delete "tmp"
}

dependencies {
    api project(':modules:common')
}

wrapper {
    distributionType = Wrapper.DistributionType.BIN
    gradleVersion = '7.3.3'
}
